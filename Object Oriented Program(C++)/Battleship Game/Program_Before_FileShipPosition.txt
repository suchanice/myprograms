#include <iostream>
#include <ctime>
#include <sstream>
#include <cstdlib>
using namespace std;

class Gameboard 
{
private:
	char grid[10][10];
public:
	void gamestart() 
	{
		for (int r = 0; r<10; r++)//creating rows
		{
			for (int c = 0; c<10; c++) //creating coloumn
			{
				grid[r][c] = '-';
			}
		}
	}
	void display(bool hideShips = false)
	{
		int y = 1;
		cout << "   A B C D E F G H I J" << endl;
		for (int i = 0; i<10; i++) 
		{
			if (y != 10) { cout << " "; }
			cout << y;
			for (int c = 0; c<10; c++) 
			{
				cout << " ";
				if (grid[i][c] == 'X') 
				{
					if (hideShips == true) 
{
						cout << "-";
					}
					else {
						cout << grid[i][c];
					}
				}
				else { cout << grid[i][c]; }
			}
			y++;
			cout << endl;
		}
		
	}
	char getSpace(int x, int y) 
	{
		return grid[y][x];
	}
	void addSpace(char space, int x, int y) 
	{
		grid[y][x] = space;
	}
};
//....................................................................
class ship {
private:
	int length;
	Gameboard* GameboardA;
public:
	ship(int L, Gameboard* BA) {
		length = L;
		GameboardA = BA;
	}
	bool shipplacement(int *X, int *Y, int dX, int dY, Gameboard *GameboardA) {
		int shipStore[10] = { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1 };
		for (int i = 0; i<length; i++) {
			shipStore[i * 2] = *X;
			shipStore[i * 2 + 1] = *Y;
			if (*Y + dY<10 && *Y + dY>-1
				&& *X + dX<10 && *X + dX>-1
				&& GameboardA->getSpace(*X + dX, *Y + dY) == '-') {
				*Y = *Y + dY;
				*X = *X + dX;
			}
			else { return false; }
		}
		for (int c = 0; c / 2<length; c += 2) {
			GameboardA->addSpace('X', shipStore[c], shipStore[c + 1]);
		}
		return true;
	}
	int getLength() { return length; }
};

class Player {
protected:
	Gameboard* userGridA;
	Gameboard* anotherA;
	int X;
	int Y;
	int hits;
public:
	virtual void go() {}
	Player() {
		hits = 0;
	}
	bool won() {
		if (hits == 17) {
			return true;
		}
		else { return false; }
	}
	bool hit() {
		if (anotherA->getSpace(X - 1, Y - 1) == 'X') {
			cout << "Hit!" << endl;
			hits++;
			anotherA->addSpace('#', X - 1, Y - 1);
			return true;
		}
		else {
			cout << "Miss!" << endl;
			anotherA->addSpace('O', X - 1, Y - 1);
			return false;
		}
	}
	void shipplacement() {
		ship aircraftCarrier(5, userGridA);
		positionShip(&aircraftCarrier);

		ship battleship(4, userGridA);
		positionShip(&battleship);

		ship cruiser(3, userGridA);
		positionShip(&cruiser);

		ship destroyer(3, userGridA);
		positionShip(&destroyer);

		ship patrolBoat(2, userGridA);
		positionShip(&patrolBoat);
	}
	void positionShip(ship* type) {
		while (1) {
			int dY = 0;
			int dX = 0;
			dX = (rand() % 2) - (rand() % 2);
			if (dX == 0) {
				dY = (rand() % 2);
				if (dY == 0) { (dY)--; }
			}
			else { dY = 0; }
			int Y = (rand() % 10);
			int X = (rand() % 10);
			if (userGridA->getSpace(X, Y) == '-') {
				if (type->shipplacement(&X, &Y, dX, dY, userGridA) == false) {
					dX *= -1;
					dY *= -1;
					if (type->shipplacement(&X, &Y, dX, dY, userGridA) == true) { return; }
				}
				else { return; }
			}
		}
	}
};
//.........................................................................................
class User : public Player 
{
public:
	User(Gameboard* tBA, Gameboard* oBA)
	{
		userGridA = tBA;
		anotherA = oBA;
	}
	void go() {
		setCordinate();
		hit();
		cout << "Coordiates you entered for x  : "<< X << " and  for y : " << Y << endl;		
	}
	void setCordinate() {
		string input;
		while (1) {
			do {
				cout << endl << "Enter x coordinate (enter letter A to J): ";
				char xCordinate = '\0';
				cin >> input;
				if (input.length() == 1) { xCordinate = input[0]; }
				X = LettertoNum(xCordinate);
				if (X == 0) { cout << "Please enter a valid letter between A-J :" << endl; }
			} while (X == 0);
			do {
				cout << "Enter y coordinate (enter a number from 1 to 10):  " ;
				cin >> input;
				stringstream(input) >> Y;
				if (Y>10 || Y<1) { cout << "Please enter a valid number between 1-10" << endl; }
			} while (Y>10 || Y<1);
			if (anotherA->getSpace(X - 1, Y - 1) == '#'
				|| anotherA->getSpace(X - 1, Y - 1) == 'O') {
				cout << endl << "Please do not put a space that has already been hit!" << endl;
			}
			else { break; }
		}
	}
	int LettertoNum(char ltr) {
		if (int(ltr)>64 && int(ltr)<75) {
			return int(ltr) - 64;
		}
		else if (int(ltr)>96 && int(ltr)<107) {
			return int(ltr) - 96;
		}
		return 0;
	}
};
//.....................................................................
class Computer : public Player 
{
private:
	int Xpt;
	int Ypt;
	int vX;
	int vY;
	bool type1;
	bool type2;
	bool DirSearch;
	bool oppositeCheck;
	int gap;
	int count;
public:
	Computer(Gameboard* tBA, Gameboard* oBA) {
		userGridA = tBA;
		anotherA = oBA;
		Xpt = 0;
		Ypt = 0;
		vX = 0;
		vY = 0;
		type1 = false;
		type2 = false;
		DirSearch = false;
		oppositeCheck = false;
		gap = 2;
		count = 0;
	}
	void go() {
		setCordinate();
		if (hit() == true) {
			if (Xpt == 0) {
				Xpt = X;
				Ypt = Y;
			}
			else if (DirSearch == false) {
				DirSearch = true;
				if (oppositeCheck == true) {
					if (vX<0 || vY<0) {
						type1 = true;
					}
					else { type2 = true; }
				}
			}
		}
		else if (DirSearch == true) {
			if (X - Xpt>0 || Y - Ypt>0) {
				type1 = true;
			}
			else { type2 = true; }
		}
	}
	void setCordinate() {
		if (Xpt != 0) {
			if (type1 == false
				|| type2 == false) {
				if (DirSearch == false) {
					findDirection();
				}
				else {
					findRest();
				}
			}
			if (type1 == true
				&& type2 == true) {
				Xpt = 0;
				Ypt = 0;
				vX = 0;
				vY = 0;
				type1 = false;
				type2 = false;
				DirSearch = false;
				oppositeCheck = false;
				gap = 2;
				count = 0;
			}
		}
		if (Xpt == 0) {
			do {
				X = (rand() % 10) + 1;
				Y = (rand() % 10) + 1;
			} while (anotherA->getSpace(X - 1, 10 - Y) == 'O'
				|| anotherA->getSpace(X - 1, 10 - Y) == '#');
		}
	}
	void findDirection() {
		if (count == 0) {
			vX = (rand() % 2) - (rand() % 2);
			if (vX == 0) {
				vY = (rand() % 2);
				if (vY == 0) { (vY)--; }
			}
			else { vY = 0; }
		}
		while (count<4) {
			if (count == 2) {
				oppositeCheck = false; int i = vX; vX = vY; vY = i;
			}
			else if (count != 0) { oppositeCheck = true; vX *= -1; vY *= -1; }
			count++;
			if (Xpt + vX<11 && Xpt + vX>0
				&& Ypt + vY<11 && Ypt + vY>0
				&& anotherA->getSpace((Xpt + vX) - 1, 10 - (Ypt + vY)) != '#'
				&&anotherA->getSpace((Xpt + vX) - 1, 10 - (Ypt + vY)) != 'O') {
				X = Xpt + vX;
				Y = Ypt + vY;
				return;
			}
		}
		type1 = true;
		type2 = true;
	}
	void findRest() {
		int alter = 0;
		if (type1 == true) {
			if (vX<0 || vY<0) {
				alter = 1;
			}
			else { alter = -gap; }
		}
		else if (type2 == true) {
			if (vX<0 || vY<0) {
				alter = -gap;
			}
			else { alter = 1; }
		}
		else {
			alter = (rand() % 2);
			if (alter == 0) { alter = -gap; }
		}
		if (vX<0 || vY<0) { alter *= -1; }
		int i = 0;
		while (i<2 && (type1 == false || type2 == false)) {
			if (vX == 0) {
				if (Ypt + vY + alter>0
					&& Ypt + vY + alter<11
					&& anotherA->getSpace(Xpt - 1, 10 - (Ypt + vY + alter)) != '#'
					&&anotherA->getSpace(Xpt - 1, 10 - (Ypt + vY + alter)) != 'O') {
					Y = Ypt + vY + alter;
					if (alter == 1 || alter == -1) { vY += alter; }
					gap++;
					return;
				}
			}
			else {
				if (Xpt + vX + alter>0
					&& Xpt + vX + alter<11
					&& anotherA->getSpace((Xpt + vX + alter) - 1, 10 - Ypt) != '#'
					&&anotherA->getSpace((Xpt + vX + alter) - 1, 10 - Ypt) != 'O') {
					X = Xpt + vX + alter;
					if (alter == 1 || alter == -1) { vX += alter; }
					gap++;
					return;
				}
			}
			if (alter == 1) {
				alter = -gap; type1 = true;
			}
			else if (alter == -1) {
				alter = gap; type2 = true;
			}
			else if (alter == gap) {
				alter = -1; type1 = true;
			}
			else { alter = 1; type2 = true; }
			i++;
		}

	}
};
//..................................................................................................
int main() {
	int winner;
	srand((unsigned int)(time(0)));

	Gameboard GameboardO1;
	GameboardO1.gamestart();

	Gameboard GameboardO2;
	GameboardO2.gamestart();
	User Person1(&GameboardO2, &GameboardO1);
	Person1.shipplacement();
	Computer Comp(&GameboardO1, &GameboardO2);
	Comp.shipplacement();
	Player* PlayerA = &Person1;

	while (1) {
		cout << "This board will track the shooting hits !" << endl;
		GameboardO1.display(true);
		cout << "This is the battleship board & ship positions:" << endl;
		GameboardO2.display();
		PlayerA->go();
		if (PlayerA->won() == true) {
			cout << endl;
			if (PlayerA == &Person1) {
				cout << "You win the game!" << endl;
				cin >> winner;
			}
			else {
				cout << "Computer wins the game!" << endl;
				cin >> winner;

			}
			//cout << endl;
			GameboardO1.display(true);
			//cout << endl;
			GameboardO2.display();
			break;
		}
		if (PlayerA == &Person1) {
			PlayerA = &Comp;
		}
		else { PlayerA = &Person1; }
	}

	return 0;
}